const char *scanner(int q[21][21]) {
    // Статичний масив для збереження результату, який залишається після завершення функції
    static char result[10];
    int byte = 0;       // Проміжна змінна для формування байта
    int x = 20;         // Початкова координата X
    int y = 19;         // Початкова координата Y
    int index = 0;      // Індекс для запису в масив result
    int bitCount = 1;   // Лічильник для підрахунку бітів
    int state = 1;      // Змінна для чергування стану (інверсії)

    // Проходимо з y = 19 до y = 9, обробляючи верхню частину
    while (--y > 8) {
        byte |= (!state ^ q[y][x - 1]) | ((state ^ q[y][x]) << 1); // Формуємо 2 біти
        if (bitCount++ % 4 == 0) {  // Кожні 4 біти
            result[index++] = byte; // Зберігаємо байт у результат
            byte = 0;               // Скидаємо байт
        }
        byte <<= 2;   // Зсуваємо байт для наступних бітів
        state ^= 1;   // Чергуємо стан
    }

    state ^= 1;  // Інверсія стану
    x -= 2;      // Зміщення координати X

    // Проходимо з y = 9 до y = 20, обробляючи нижню частину
    while (++y < 21) {
        byte |= (!state ^ q[y][x - 1]) | ((state ^ q[y][x]) << 1); // Формуємо 2 біти
        if (bitCount++ % 4 == 0) {  // Кожні 4 біти
            result[index++] = byte; // Зберігаємо байт у результат
            byte = 0;               // Скидаємо байт
        }
        byte <<= 2;   // Зсуваємо байт для наступних бітів
        state ^= 1;   // Чергуємо стан
    }

    state ^= 1;  // Інверсія стану
    x -= 2;      // Зміщення координати X

    // Проходимо з y = 20 до y = 11, обробляючи середню частину
    while (y-- > 11) {
        byte |= (!state ^ q[y][x - 1]) | ((state ^ q[y][x]) << 1); // Формуємо 2 біти
        if (bitCount++ % 4 == 0) {  // Кожні 4 біти
            result[index++] = byte; // Зберігаємо байт у результат
            byte = 0;               // Скидаємо байт
        }
        byte <<= 2;   // Зсуваємо байт для наступних бітів
        state ^= 1;   // Чергуємо стан
    }

    // Завершення: додаємо символ кінця рядка і повертаємо результат
    result[1 + result[0]] = '\0';
    return result + 1;
}
